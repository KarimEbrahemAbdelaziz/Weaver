//
//  GeneratorTests.swift
//  WeaverCodeGenTests
//
//  Created by Th√©ophane Rupin on 3/4/18.
//

import Foundation
import XCTest
import SourceKittenFramework
import PathKit

@testable import WeaverCodeGen

final class GeneratorTests: XCTestCase {
    
    let templatePath = Path(#file).parent() + Path("../../Resources/dependency_resolver.stencil")

    func test_generator_should_return_nil_when_no_annotation_is_detected() {
        do {
            let actual = try actualOutput()
            XCTAssertNil(actual)
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_when_an_empty_type_gets_registered() {
        do {
            try performTest()
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_when_an_isolated_type_gets_registered() {
        do {
            try performTest()
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_a_customRef() {
        do {
            try performTest()
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_embedded_injectable_types() {
        do {
            try performTest()
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_a_public_injectableType() {
        
        do {
            let file = File(contents: """
public final class API {
  // weaver: session = Session
  // weaver: logger <- Logger
  // weaver: host <= String
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)

            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - API
protocol APIInputDependencyResolver {
    var logger: Logger { get }
}
protocol APIDependencyResolver {
    var host: String { get }
    var logger: Logger { get }
    var session: Session { get }
}
final class APIDependencyContainer: APIDependencyResolver {
    let host: String
    let logger: Logger
    private var _session: Session?
    var session: Session {
        if let value = _session { return value }
        let value = Session()
        _session = value
        return value
    }
    init(injecting dependencies: APIInputDependencyResolver, host: String) {
        self.host = host
        logger = dependencies.logger
        _ = session
    }
}
final class APIShimDependencyContainer: APIInputDependencyResolver {
    let logger: Logger
    init(logger: Logger) {
        self.logger = logger
    }
}
extension API {
    public convenience init(logger: Logger, host: String) {
        let shim = APIShimDependencyContainer(logger: logger)
        let dependencies = APIDependencyContainer(injecting: shim, host: host)
        self.init(injecting: dependencies)
    }
}
"""
            
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)

        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_ignored_types() {
        
        do {
            let file = File(contents: """
final class API: APIProtocol {
    // weaver: parameter <= UInt
}

class AnotherService {
    // This class is ignored
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)
            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - API
protocol APIDependencyResolver {
    var parameter: UInt { get }
}
final class APIDependencyContainer: APIDependencyResolver {
    let parameter: UInt
    init(parameter: UInt) {
        self.parameter = parameter
    }
}
"""
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)
            
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_internal_type_with_one_parameter_being_registered_in_a_public_type() {
        
        do {
            let file = File(contents: """
final class Logger {
    // weaver: domain <= String
}
public final class MovieManager {
    // weaver: logger = Logger
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)
            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - Logger
protocol LoggerDependencyResolver {
    var domain: String { get }
}
final class LoggerDependencyContainer: LoggerDependencyResolver {
    let domain: String
    init(domain: String) {
        self.domain = domain
    }
}
// MARK: - MovieManager
protocol MovieManagerDependencyResolver {
    func logger(domain: String) -> Logger
}
final class MovieManagerDependencyContainer: MovieManagerDependencyResolver {
    private var _logger: Logger?
    func logger(domain: String) -> Logger {
        if let value = _logger { return value }
        let dependencies = LoggerDependencyContainer(domain: domain)
        let value = Logger(injecting: dependencies)
        _logger = value
        return value
    }
    init() {
        _ = logger(domain: domain)
    }
}
extension MovieManager {
    public convenience init() {
        let dependencies = MovieManagerDependencyContainer()
        self.init(injecting: dependencies)
    }
}
"""
            
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)
            
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_type_registering_a_generic_dependency() {
        
        do {
            let file = File(contents: """
final class MovieManager {
    // weaver: logger = Logger<String>
}
final class Logger<T> {
    // weaver: domain <= String
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)
            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - Logger
protocol LoggerDependencyResolver {
    var domain: String { get }
}
final class LoggerDependencyContainer<T>: LoggerDependencyResolver {
    let domain: String
    init(domain: String) {
        self.domain = domain
    }
}
// MARK: - MovieManager
protocol MovieManagerDependencyResolver {
    func logger(domain: String) -> Logger<String>
}
final class MovieManagerDependencyContainer: MovieManagerDependencyResolver {
    private var _logger: Logger<String>?
    func logger(domain: String) -> Logger<String> {
        if let value = _logger { return value }
        let dependencies = LoggerDependencyContainer(domain: domain)
        let value = Logger<String>(injecting: dependencies)
        _logger = value
        return value
    }
    init() {
        _ = logger(domain: domain)
    }
}
"""
            
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)
            
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_code_with_injectable_class_with_indirect_references() {
        
        do {
            let file = File(contents: """
final class AppDelegate {
    // weaver: movieManager = MovieManager
    // weaver: movieManager.scope = .container

    // weaver: homeViewController = HomeViewController
}

final class HomeViewController {
    // weaver: movieViewController = MovieViewController
    // weaver: movieViewController.scope = .transient
}

final class MovieViewController {
    // weaver: reviewViewController = ReviewViewController
    // weaver: reviewViewController.scope = .transient
}

final class ReviewViewController {
    // weaver: movieManager <- MovieManager
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)
            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - HomeViewController
protocol HomeViewControllerInputDependencyResolver {
    var movieManager: MovieManager { get }
}
protocol HomeViewControllerDependencyResolver {
    var movieManager: MovieManager { get }
    var movieViewController: MovieViewController { get }
}
final class HomeViewControllerDependencyContainer: HomeViewControllerDependencyResolver {
    let movieManager: MovieManager
    var movieViewController: MovieViewController {
        let dependencies = MovieViewControllerDependencyContainer(injecting: self)
        let value = MovieViewController(injecting: dependencies)
        return value
    }
    init(injecting dependencies: HomeViewControllerInputDependencyResolver) {
        movieManager = dependencies.movieManager
    }
}
extension HomeViewControllerDependencyContainer: MovieViewControllerInputDependencyResolver {}
// MARK: - MovieViewController
protocol MovieViewControllerInputDependencyResolver {
    var movieManager: MovieManager { get }
}
protocol MovieViewControllerDependencyResolver {
    var movieManager: MovieManager { get }
    var reviewViewController: ReviewViewController { get }
}
final class MovieViewControllerDependencyContainer: MovieViewControllerDependencyResolver {
    let movieManager: MovieManager
    var reviewViewController: ReviewViewController {
        let dependencies = ReviewViewControllerDependencyContainer(injecting: self)
        let value = ReviewViewController(injecting: dependencies)
        return value
    }
    init(injecting dependencies: MovieViewControllerInputDependencyResolver) {
        movieManager = dependencies.movieManager
    }
}
extension MovieViewControllerDependencyContainer: ReviewViewControllerInputDependencyResolver {}
// MARK: - ReviewViewController
protocol ReviewViewControllerInputDependencyResolver {
    var movieManager: MovieManager { get }
}
protocol ReviewViewControllerDependencyResolver {
    var movieManager: MovieManager { get }
}
final class ReviewViewControllerDependencyContainer: ReviewViewControllerDependencyResolver {
    let movieManager: MovieManager
    init(injecting dependencies: ReviewViewControllerInputDependencyResolver) {
        movieManager = dependencies.movieManager
    }
}
// MARK: - AppDelegate
protocol AppDelegateDependencyResolver {
    var movieManager: MovieManager { get }
    var homeViewController: HomeViewController { get }
}
final class AppDelegateDependencyContainer: AppDelegateDependencyResolver {
    private var _movieManager: MovieManager?
    var movieManager: MovieManager {
        if let value = _movieManager { return value }
        let value = MovieManager()
        _movieManager = value
        return value
    }
    private var _homeViewController: HomeViewController?
    var homeViewController: HomeViewController {
        if let value = _homeViewController { return value }
        let dependencies = HomeViewControllerDependencyContainer(injecting: self)
        let value = HomeViewController(injecting: dependencies)
        _homeViewController = value
        return value
    }
    init() {
        _ = movieManager
        _ = homeViewController
    }
}
extension AppDelegateDependencyContainer: HomeViewControllerInputDependencyResolver {}
"""
            
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)
            
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_file_when_a_dependency_container_takes_no_parameters() {
        
        do {
            let file = File(contents: """
final class HomeViewController {
    // weaver: movieManager = MovieManager
}

final class AppDelegate {
    // weaver: homeViewController = HomeViewController
    // weaver: homeViewController.scope = .container
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)
            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - HomeViewController
protocol HomeViewControllerDependencyResolver {
    var movieManager: MovieManager { get }
}
final class HomeViewControllerDependencyContainer: HomeViewControllerDependencyResolver {
    private var _movieManager: MovieManager?
    var movieManager: MovieManager {
        if let value = _movieManager { return value }
        let value = MovieManager()
        _movieManager = value
        return value
    }
    init() {
        _ = movieManager
    }
}
// MARK: - AppDelegate
protocol AppDelegateDependencyResolver {
    var homeViewController: HomeViewController { get }
}
final class AppDelegateDependencyContainer: AppDelegateDependencyResolver {
    private var _homeViewController: HomeViewController?
    var homeViewController: HomeViewController {
        if let value = _homeViewController { return value }
        let value = HomeViewController(injecting: HomeViewControllerDependencyContainer())
        _homeViewController = value
        return value
    }
    init() {
        _ = homeViewController
    }
}
"""
            
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)
            
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
    
    func test_generator_should_generate_a_valid_swift_file_when_a_dependency_has_no_container() {
        
        do {
            let file = File(contents: """
final class AppDelegate {
    // weaver: homeViewController = HomeViewController
    // weaver: homeViewController.scope = .container
}
""")
            
            let lexer = Lexer(file, fileName: "test.swift")
            let tokens = try lexer.tokenize()
            let parser = Parser(tokens, fileName: "test.swift")
            let ast = try parser.parse()
            let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
            
            let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)
            let (_ , actual) = try generator.generate().first!
            
            let expected = """
/// This file is generated by Weaver 0.10.2
/// DO NOT EDIT!
// MARK: - AppDelegate
protocol AppDelegateDependencyResolver {
    var homeViewController: HomeViewController { get }
}
final class AppDelegateDependencyContainer: AppDelegateDependencyResolver {
    private var _homeViewController: HomeViewController?
    var homeViewController: HomeViewController {
        if let value = _homeViewController { return value }
        let value = HomeViewController()
        _homeViewController = value
        return value
    }
    init() {
        _ = homeViewController
    }
}
"""
            
            XCTAssertEqual(actual!, expected)
            try exportDiff(actual: actual!, expected: expected)
            
        } catch {
            XCTFail("Unexpected error \(error)")
        }
    }
}

// MARK: - Utils

private extension GeneratorTests {
    
    func actualOutput(_ function: StringLiteralType = #function) throws -> String? {
        let fileName = function.replacingOccurrences(of: "()", with: "")
        let path = Path(#file).parent() + Path("Input/\(fileName).swift")

        if !path.exists {
            try path.write("\n")
        }
        
        guard let file = File(path: path.string) else {
            XCTFail("Could not find file at path \(path.string)")
            return nil
        }
        
        let templatePath = Path(#file).parent() + Path("../../Resources/dependency_resolver.stencil")
        
        let lexer = Lexer(file, fileName: "test.swift")
        let tokens = try lexer.tokenize()
        let parser = Parser(tokens, fileName: "test.swift")
        let ast = try parser.parse()
        let dependencyGraph = try Linker(syntaxTrees: [ast]).dependencyGraph
        
        let generator = try Generator(dependencyGraph: dependencyGraph, template: templatePath)

        guard let (_ , actual) = try generator.generate().first else {
            return nil
        }
        
        return actual.flatMap { $0 + "\n" }
    }
    
    func expectedOutput(actual: String?, _ function: StringLiteralType = #function) throws -> String {
        let fileName = function.replacingOccurrences(of: "()", with: "")
        let path = Path(#file).parent() + Path("Output/Weaver.\(fileName).swift")
        
        if let actual = actual, !path.exists {
            try path.write(actual)
        }
        
        return try path.read()
    }
    
    func exportDiff(actual: String, expected: String, _ function: StringLiteralType = #function) throws {
        
        guard actual != expected else { return }

        let dirPath = Path("/tmp/weaver_tests/\(GeneratorTests.self)")
        let function = function.replacingOccurrences(of: "()", with: "")
        let actualFilePath = dirPath + Path("\(function)_actual.swift")
        let expectedFilePath = dirPath + Path("\(function)_expected.swift")

        try actualFilePath.write(actual)
        try expectedFilePath.write(expected)
        
        print("Execute the following to check the diffs:")
        print("\n")
        print("diffchecker \(actualFilePath.string) \(expectedFilePath.string)")
        print("\n")
    }
    
    func performTest(_ function: StringLiteralType = #function) throws {
        let actual = try actualOutput(function)
        let expected = try expectedOutput(actual: actual, function)
        
        XCTAssertEqual(actual, expected)
        try actual.flatMap { try exportDiff(actual: $0, expected: expected, function) }
    }
}
