/// This file is generated by Weaver 0.9.10
/// DO NOT EDIT!

import WeaverDI
{% for resolver in resolvers %}
// MARK: - {{resolver.targetTypeName}}

{% if not resolver.isIsolated %}

{% if resolver.isPublic %}public {% endif %}final class {{resolver.targetTypeName}}DependencyContainer: DependencyContainer {
    
    {% for parameter in resolver.parameters %}
    let {{parameter.name}}: {{parameter.typeName}}
    {% endfor %}

    {% if resolver.isPublic %}public {% endif %}init({% if not resolver.isRoot %}parent: DependencyContainer{% if resolver.parameters %}, {% endif %}{% endif %}{% for parameter in resolver.parameters %}{{parameter.name}}: {{parameter.typeName}}{% if not forloop.last %}, {% endif %}{% endfor %}) {

        {% for parameter in resolver.parameters %}
        self.{{parameter.name}} = {{parameter.name}}
        {% endfor %}

        super.init({% if not resolver.isRoot %}parent{% endif %})
    }

    override {% if resolver.isPublic %}public {% endif %}func registerDependencies(in store: DependencyStore) {
        
        {% for registration in resolver.registrations %}

        store.register({{registration.abstractTypeName}}.self, scope: .{{registration.scope}}, name: "{{registration.name}}", builder: { (dependencies{% for parameter in registration.parameters %}, {{parameter.name}}: {{parameter.typeName}}{% endfor %}) in
            {% if not registration.isCustom %}

            return {{registration.typeName}}{% if registration.hasBuilder %}.make{{registration.typeName}}(injecting: dependencies{% for parameter in registration.parameters %}, {{parameter.name}}: {{parameter.name}}{% endfor %}){% else %}(){% endif %}
            {% else %}{# not registration.isCustom #}

            return self.{{registration.name}}CustomRef(dependencies{% for parameter in registration.parameters %}, {{parameter.name}}: {{parameter.name}}{% endfor %})
            {% endif %}{# not registration.isCustom #}
        })

        {% endfor %}{# resolver.registrations #}
    }
}

{% endif %}{# not resolver.isIsolated #}

{% if resolver.doesSupportObjc %}@objc {% endif %}{% if resolver.isPublic %}public {% endif %}protocol {{resolver.targetTypeName}}DependencyResolver {

    {% for parameter in resolver.parameters %}
    var {{parameter.name}}: {{parameter.typeName}} { get }
    {% endfor %}

    {% for reference in resolver.references %}

    {% if reference.parameters %}
    func {{reference.name}}({% for parameter in reference.parameters %}{{parameter.name}}: {{parameter.typeName}}{% if not forloop.last %}, {% endif %}{% endfor %}) -> {{reference.resolvedTypeName}}
    {% else %}{# reference.parameters #}
    var {{reference.name}}: {{reference.resolvedTypeName}} { get }
    {% endif %}{# reference.parameters #}

    {% endfor %}{# resolver.references #}

    {% for registration in resolver.registrations %}

    {% if registration.isCustom %}
    func {{registration.name}}CustomRef(_ dependencies: DependencyContainer{% for parameter in registration.parameters %}, {{parameter.name}}: {{parameter.typeName}}{% endfor %}) -> {{registration.abstractTypeName}}
    {% endif %}{# registration.isCustom #}

    {% endfor %}{# resolver.registrations  #}
}

{% if not resolver.isIsolated %}

extension {{resolver.targetTypeName}}DependencyContainer: {{resolver.targetTypeName}}DependencyResolver {
    {% for reference in resolver.references %}

    {% if reference.parameters %}

    {% if resolver.isPublic %}public {% endif %}func {{reference.name}}({% for parameter in reference.parameters %}{{parameter.name}}: {{parameter.typeName}}{% if not forloop.last %}, {% endif %}{% endfor %}) -> {{reference.resolvedTypeName}} {
        return resolve({{reference.resolvedTypeName}}.self, name: "{{reference.name}}", parameter{% if reference.parameters.count > 1 %}s{% endif %}: {% for parameter in reference.parameters %}{{parameter.name}}{% if not forloop.last %}, {% endif %}{% endfor %})
    }

    {% else %}{# reference.paramters #}

    {% if resolver.isPublic %}public {% endif %}var {{reference.name}}: {{reference.resolvedTypeName}} {
        return resolve({{reference.resolvedTypeName}}.self, name: "{{reference.name}}")
    }

    {% endif %}{# reference.paramters #}

    {% endfor %}{# resolver.references #}
}

{% endif %}{# not resolver.isIsolated #}

{% if not resolver.isRoot %}

{% if not resolver.isIsolated %}

extension {% if resolver.enclosingTypeNames %}{{resolver.enclosingTypeNames|join: "."}}.{% endif %}{{resolver.targetTypeName}} {

    {% if resolver.isPublic %}public {% endif %}static func make{{resolver.targetTypeName}}({% if not resolver.isRoot %}injecting parentDependencies: DependencyContainer{% if resolver.parameters %}, {% endif %}{% endif %}{% for parameter in resolver.parameters %}{{parameter.name}}: {{parameter.typeName}}{% if not forloop.last %}, {% endif %}{% endfor %}) -> {{resolver.targetTypeName}} {

        let dependencies = {{resolver.targetTypeName}}DependencyContainer({% if not resolver.isRoot %}parent: parentDependencies{% if resolver.parameters %}, {% endif %}{% endif %}{% for parameter in resolver.parameters %}{{parameter.name}}: {{parameter.name}}{% if not forloop.last %}, {% endif %}{% endfor %})
        return {{resolver.targetTypeName}}(injecting: dependencies)
        
    }
}

{% endif %}{# not resolver.isIsolated #}

{% if resolver.isPublic %}public {% endif %}protocol {{resolver.targetTypeName}}{% if resolver.doesSupportObjc %}ObjC{% endif %}DependencyInjectable {
    init(injecting dependencies: {{resolver.targetTypeName}}DependencyResolver)
}

{% if not resolver.doesSupportObjc %}

extension {% if resolver.enclosingTypeNames %}{{resolver.enclosingTypeNames|join: "."}}.{% endif %}{{resolver.targetTypeName}}: {{resolver.targetTypeName}}DependencyInjectable {}

{% endif %}{# not resolver.doesSupportObjc #}

{% endif %}{# not resolver.isRoot #}

{% endfor %}{# resolvers #}
