
{% macro ParametersDecl parameters %}{% for parameter in parameters %}{{parameter.name}}: {{parameter.type}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro ParametersDeclWithSeparator parameters %}{% if parameters %}, {% endif %}{% call ParametersDecl dependencyContainer.parameters %}{% endmacro %}

{% macro ParametersPassIn parameters %}{% for parameter in parameters %}{{parameter.name}}: {{parameter.name}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro ParametersPassInWithSeparator parameters %}{% if parameters %}, {% endif %}{% call ParametersPassIn parameters %}{% endmacro %}

{% macro ParametersAssign parameters %}
        {% for parameter in parameters %}
        self.{{parameter.name}} = {{parameter.name}}
        {% endfor %}
{% endmacro %}

{% macro DependencyContainerBuilder dependency %}{{dependency.type.name}}DependencyContainer(injecting: self{% call ParametersPassInWithSeparator dependency.parameters %}){% endmacro %}

{% macro Instance dependency %}Instance<{{dependency.abstractType}}>{% endmacro %}

{% macro DependencyResolverDecls dependencies %}
{% for dependency in dependencies %}

    {% if not dependency.customRef %}

    {% if dependency.parameters %}
    func {{dependency.name}}({% call ParametersDecl dependency.parameters %}) -> {{dependency.abstractType}}
    {% else %}
    var {{dependency.name}}: {{dependency.abstractType}} { get }
    {% endif %}

    {% else %}{# not dependency.customRef #}
    var {{dependency.name}}: {{dependency.abstractType}} { get }
    func {{dependency.name}}CustomRef() -> {{dependency.abstractType}}
    {% endif %}{# not dependency.customRef #}

{% endfor %}
{% endmacro %}

{% macro DependencyResolverImpl dependency %}
    {% if not dependency.customRef %}

    {% if dependency.parameters %}
    func {{dependency.name}}({% call ParametersDecl dependency.parameters %}) -> {{dependency.abstractType}} {
        return {{dependency.name}}Ref({% call ParametersPassIn dependency.parameters %}).value
    }
    {% else %}
    var {{dependency.name}}: {{dependency.abstractType}} {
        return {{dependency.name}}Ref.value
    }
    {% endif %}

    {% else %}{# not dependency.customRef #}
    var {{dependency.name}}: {{dependency.abstractType}} {
        return {{dependency.name}}Ref.value
    }
    {% endif %}{# not dependency.customRef #}
{% endmacro %}

/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!

{% for moduleName in imports %}
import {{moduleName}}
{% endfor %}{# imports #}

{% for dependencyContainer in dependencyContainers %}

// MARK: - {{dependencyContainer.targetType.name}}

{% if dependencyContainer.references %}
protocol {{dependencyContainer.targetType.name}}InputDependencyResolver {
    {% for reference in dependencyContainer.references %}

    {% if not reference.customRef %}

    {% if reference.parameters %}
    func {{reference.name}}({% call ParametersDecl reference.parameters %}) -> {{reference.abstractType}}
    {% else %}
    var {{reference.name}}: {{reference.abstractType}} { get }
    {% endif %}

    {% else %}{# not reference.customRef #}
    var {{reference.name}}: {{reference.abstractType}} { get }
    {% endif %}{# not reference.customRef #}

    {% endfor %}
}
{% endif %}

{% if dependencyContainer.doesSupportObjc %}@objc {% endif %}protocol {{dependencyContainer.targetType.name}}DependencyResolver {

    {% call DependencyResolverDecls dependencyContainer.parameters %}

    {% call DependencyResolverDecls dependencyContainer.references %}

    {% call DependencyResolverDecls dependencyContainer.registrations %}
}

final class {{dependencyContainer.targetType.name}}DependencyContainer{{dependencyContainer.targetType.generics}}: {% if dependencyContainer.doesSupportObjc %}NSObject, {% endif %}{{dependencyContainer.targetType.name}}DependencyResolver {
    
    {% for parameter in dependencyContainer.parameters %}
    let {{parameter.name}}: {{parameter.abstractType}}
    {% endfor %}

    {% for reference in dependencyContainer.references %}
    let {{reference.name}}: {{reference.abstractType}}
    {% endfor %}

    {% for registration in dependencyContainer.registrations %}
    {% if registration.isTransient %}

    {% if not registration.customRef %}

    {% if registration.parameters %}
    func {{registration.name}}({% call ParametersDecl registration.parameters %}) -> {{registration.abstractType}} {
    {% else %}
    var {{registration.name}}: {{registration.abstractType}} {
    {% endif %}

    {% else %}{# not registration.customRef #}
    var {{registration.name}}: {{registration.abstractType}} {
    {% endif %}{# not registration.customRef #}

    {% else %}{# registration.isTransient #}
    {% call DependencyResolverImpl registration %}
    private lazy var {{registration.name}}Ref = {% call Instance registration %}(scope: .{{registration.scope}}) { [unowned self] in
    {% endif %}

        {% if not registration.customRef %}

        {% if registration.hasBuilder %}
        let dependencies = {% call DependencyContainerBuilder registration %}
        return {{registration.type}}(injecting: dependencies)
        {% else %}{# registration.hasBuilder #}
        return {{registration.type}}()
        {% endif %}{# registration.hasBuilder #}

        {% else %}{# not registration.customRef #}
        return self.{{registration.name}}CustomRef()
        {% endif %}{# not registration.customRef #}
    }
    {% endfor %}{# dependencyContainer.registrations #}

    init({% if dependencyContainer.references %}injecting dependencies: {{dependencyContainer.targetType.name}}InputDependencyResolver{% if dependencyContainer.parameters %}, {% endif %}{% endif %}{% call ParametersDecl dependencyContainer.parameters %}) {

        {% call ParametersAssign dependencyContainer.parameters %}

        {% for reference in dependencyContainer.references %}
        {% if reference.parameters %}
        {{reference.name}} = dependencies.{{reference.nane}}({% call ParametersPassIn dependency.parameters %})
        {% else %}
        {{reference.name}} = dependencies.{{reference.name}}
        {% endif %}
        {% endfor %}

        {% if dependencyContainer.doesSupportObjc %}super.init(){% endif %}

        {% for registration in dependencyContainer.registrations %}
        {% if not registration.isTransient %}
        _ = {{registration.name}}Ref.value
        {% endif %}
        {% endfor %}{# dependencyContainer.registrations #}
    }
}

{% for injectableDependency in dependencyContainer.injectableDependencies %}
extension {{dependencyContainer.targetType.name}}DependencyContainer: {{injectableDependency.targetType.name}}InputDependencyResolver {}
{% endfor %}

{% if not dependencyContainer.isRoot %}
protocol {{dependencyContainer.targetType.name}}{% if dependencyContainer.doesSupportObjc %}ObjC{% endif %}DependencyInjectable {
    {% for genericName in dependencyContainer.targetType.genericNames %}
    associatedtype {{genericName}}
    {% endfor %}

    {% if dependencyContainer.targetType.genericNames %}
    init(injecting dependencies: {{dependencyContainer.targetType.name}}DependencyContainer{{dependencyContainer.targetType.generics}})
    {% else %}
    init(injecting dependencies: {{dependencyContainer.targetType.name}}DependencyResolver)
    {% endif %}
}
{% endif %}

{% if dependencyContainer.isPublic %}
{% if dependencyContainer.references %}
final class {{dependencyContainer.targetType.name}}ShimDependencyContainer{{dependencyContainer.targetType.generics}}: {{dependencyContainer.targetType.name}}InputDependencyResolver {

    {% for reference in dependencyContainer.references %}
    let {{reference.name}}: {{reference.abstractType}}
    {% endfor %}

    init({% call ParametersDecl dependencyContainer.references %}) {

        {% for reference in dependencyContainer.references %}
        self.{{reference.name}} = {{reference.name}}
        {% endfor %}
    }
}

{% endif %}{# dependencyContainer.references #}

extension {{dependencyContainer.targetType.name}} {

    public convenience init({% call ParametersDecl dependencyContainer.references %}{% if dependencyContainer.references %}{% if dependencyContainer.parameters %}, {% endif %}{% endif %}{% call ParametersDecl dependencyContainer.parameters %}) {
        
        {% if dependencyContainer.references %}
        let shim = {{dependencyContainer.targetType.name}}ShimDependencyContainer({% call ParametersPassIn dependencyContainer.references %})
        {% endif %}

        let dependencies = {{dependencyContainer.targetType.name}}DependencyContainer({% if dependencyContainer.references %}injecting: shim{% if dependencyContainer.parameters %}, {% endif %}{% endif %}{% call ParametersPassIn dependencyContainer.parameters %})
        self.init(injecting: dependencies)
    }
}

{% endif %}{# dependencyContainer.isPublic #}

{% endfor %}{# dependencyContainers #}
