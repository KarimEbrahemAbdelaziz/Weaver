/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!
import API
import UIKit
import WeaverDI
// MARK: - AppDelegate
protocol AppDelegateDependencyResolver {
    var logger: Logger { get }
    var urlSession: URLSession { get }
    func urlSessionCustomRef() -> URLSession
    var movieAPI: APIProtocol { get }
    func movieAPICustomRef() -> APIProtocol
    var imageManager: ImageManaging { get }
    func imageManagerCustomRef() -> ImageManaging
    var movieManager: MovieManaging { get }
    func movieManagerCustomRef() -> MovieManaging
    var homeViewController: UIViewController { get }
    var reviewManager: ReviewManaging { get }
}
final class AppDelegateDependencyContainer: AppDelegateDependencyResolver {
    var logger: Logger { 
        return loggerRef.value
    }
    private lazy var loggerRef = Instance<Logger>(scope: .container) { [unowned self] in
        return Logger()
    }
    var urlSession: URLSession { 
        return urlSessionRef.value        
    }
    private lazy var urlSessionRef = Instance<URLSession>(scope: .container) { [unowned self] in
        return self.urlSessionCustomRef()
    }
    var movieAPI: APIProtocol { 
        return movieAPIRef.value        
    }
    private lazy var movieAPIRef = Instance<APIProtocol>(scope: .container) { [unowned self] in
        return self.movieAPICustomRef()
    }
    var imageManager: ImageManaging { 
        return imageManagerRef.value        
    }
    private lazy var imageManagerRef = Instance<ImageManaging>(scope: .container) { [unowned self] in
        return self.imageManagerCustomRef()
    }
    var movieManager: MovieManaging { 
        return movieManagerRef.value        
    }
    private lazy var movieManagerRef = Instance<MovieManaging>(scope: .container) { [unowned self] in
        return self.movieManagerCustomRef()
    }
    var homeViewController: UIViewController { 
        return homeViewControllerRef.value
    }
    private lazy var homeViewControllerRef = Instance<UIViewController>(scope: .container) { [unowned self] in
        let dependencies = HomeViewControllerDependencyContainer(injecting: self)
        return HomeViewController(injecting: dependencies)
    }
    var reviewManager: ReviewManaging { 
        return reviewManagerRef.value
    }
    private lazy var reviewManagerRef = Instance<ReviewManaging>(scope: .container) { [unowned self] in
        let dependencies = ReviewManagerDependencyContainer(injecting: self)
        return ReviewManager(injecting: dependencies)
    }
    init() {
        _ = loggerRef.value
        _ = urlSessionRef.value
        _ = movieAPIRef.value
        _ = imageManagerRef.value
        _ = movieManagerRef.value
        _ = homeViewControllerRef.value
        _ = reviewManagerRef.value
    }
}
extension AppDelegateDependencyContainer: HomeViewControllerInputDependencyResolver {}
extension AppDelegateDependencyContainer: ReviewManagerInputDependencyResolver {}