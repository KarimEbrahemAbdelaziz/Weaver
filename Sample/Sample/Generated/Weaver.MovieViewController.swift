/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!
import API
import Foundation
import UIKit
import WeaverDI
// MARK: - MovieViewController
protocol MovieViewControllerInputDependencyResolver {
    var movieManager: MovieManaging { get }
    var imageManager: ImageManaging { get }
    var reviewManager: ReviewManaging { get }
}
protocol MovieViewControllerDependencyResolver {
    var movieID: UInt { get }
    var title: String { get }
    var movieManager: MovieManaging { get }
    var imageManager: ImageManaging { get }
    var reviewManager: ReviewManaging { get }
    var logger: Logger { get }
    func reviewController(movieID: UInt) -> WSReviewViewController
}
final class MovieViewControllerDependencyContainer: MovieViewControllerDependencyResolver {
    let movieID: UInt
    let title: String
    let movieManager: MovieManaging
    let imageManager: ImageManaging
    let reviewManager: ReviewManaging
    private var _logger: Logger?
    var logger: Logger {
        if let value = _logger { return value }
        let value = Logger()
        _logger = value
        return value
    }
    func reviewController(movieID: UInt) -> WSReviewViewController {
        let dependencies = WSReviewViewControllerDependencyContainer(injecting: self, movieID: movieID)
        let value = WSReviewViewController(injecting: dependencies)
        return value
    }
    init(injecting dependencies: MovieViewControllerInputDependencyResolver, movieID: UInt, title: String) {
        self.movieID = movieID
        self.title = title
        self.movieManager = dependencies.movieManager
        self.imageManager = dependencies.imageManager
        self.reviewManager = dependencies.reviewManager
    }
}
extension MovieViewControllerDependencyContainer: WSReviewViewControllerInputDependencyResolver {}
protocol MovieViewControllerDependencyInjectable {
    init(injecting dependencies: MovieViewControllerDependencyResolver)
}