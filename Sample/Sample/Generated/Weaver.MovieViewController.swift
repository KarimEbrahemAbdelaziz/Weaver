/// This file is generated by Weaver 0.9.9
/// DO NOT EDIT!
import WeaverDI
// MARK: - MovieViewController
final class MovieViewControllerDependencyContainer: DependencyContainer {
    let movieID: UInt
    let title: String
    init(parent: DependencyContainer, movieID: UInt, title: String) {
        self.movieID = movieID
        self.title = title
        super.init(parent)
    }
    override func registerDependencies(in store: DependencyStore) {
        store.register(Logger.self, scope: .graph, name: "logger", builder: { (dependencies) in
            return Logger()
        })
        store.register(WSReviewViewController.self, scope: .graph, name: "reviewController", builder: { (dependencies, movieID: UInt) in
            return WSReviewViewController.makeWSReviewViewController(injecting: dependencies, movieID: movieID)
        })
    }
}
protocol MovieViewControllerDependencyResolver {
    var movieID: UInt { get }
    var title: String { get }
    var logger: Logger { get }
    func reviewController(movieID: UInt) -> WSReviewViewController
    var movieManager: MovieManaging { get }
    var imageManager: ImageManaging { get }
}
extension MovieViewControllerDependencyContainer: MovieViewControllerDependencyResolver {
    var logger: Logger {
        return resolve(Logger.self, name: "logger")
    }
    func reviewController(movieID: UInt) -> WSReviewViewController {
        return resolve(WSReviewViewController.self, name: "reviewController", parameter: movieID)
    }
    var movieManager: MovieManaging {
        return resolve(MovieManaging.self, name: "movieManager")
    }
    var imageManager: ImageManaging {
        return resolve(ImageManaging.self, name: "imageManager")
    }
}
extension MovieViewController {
    static func makeMovieViewController(injecting parentDependencies: DependencyContainer, movieID: UInt, title: String) -> MovieViewController {
        let dependencies = MovieViewControllerDependencyContainer(parent: parentDependencies, movieID: movieID, title: title)
        return MovieViewController(injecting: dependencies)
    }
}
protocol MovieViewControllerDependencyInjectable {
    init(injecting dependencies: MovieViewControllerDependencyResolver)
}
extension MovieViewController: MovieViewControllerDependencyInjectable {}