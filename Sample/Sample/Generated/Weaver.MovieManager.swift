/// This file is generated by Weaver 0.9.10
/// DO NOT EDIT!
import WeaverDI
import API
import Foundation
import WeaverDI
// MARK: - MovieManager
final class MovieManagerDependencyContainer: DependencyContainer {
    init(parent: DependencyContainer? = nil) {
        super.init(parent)
    }
    override func registerDependencies(in store: DependencyStore) {
        store.register(APIProtocol.self, scope: .graph, name: "movieAPI", builder: { (dependencies) in
            return self.movieAPICustomRef(dependencies)
        })
    }
}
protocol MovieManagerDependencyResolver {
    var movieAPI: APIProtocol { get }
    var logger: Logger { get }
    func movieAPICustomRef(_ dependencies: DependencyContainer) -> APIProtocol
}
extension MovieManagerDependencyContainer: MovieManagerDependencyResolver {
    var movieAPI: APIProtocol {
        return resolve(APIProtocol.self, name: "movieAPI")
    }
    var logger: Logger {
        return resolve(Logger.self, name: "logger")
    }
}
extension MovieManager {
    static func makeMovieManager(injecting parentDependencies: DependencyContainer) -> MovieManager {
        let dependencies = MovieManagerDependencyContainer(parent: parentDependencies)
        return MovieManager(injecting: dependencies)
    }
}
protocol MovieManagerDependencyInjectable {
    init(injecting dependencies: MovieManagerDependencyResolver)
}
extension MovieManager: MovieManagerDependencyInjectable {}