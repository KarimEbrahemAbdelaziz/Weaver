/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!
import API
import Foundation
import UIKit
import WeaverDI
// MARK: - HomeViewController
protocol HomeViewControllerInputDependencyResolver {
    var movieManager: MovieManaging { get }
    var imageManager: ImageManaging { get }
    var reviewManager: ReviewManaging { get }
}
protocol HomeViewControllerDependencyResolver {
    var movieManager: MovieManaging { get }
    var imageManager: ImageManaging { get }
    var reviewManager: ReviewManaging { get }
    var logger: Logger { get }
    func movieController(movieID: UInt, title: String) -> UIViewController
}
final class HomeViewControllerDependencyContainer: HomeViewControllerDependencyResolver {
    let movieManager: MovieManaging
    let imageManager: ImageManaging
    let reviewManager: ReviewManaging
    private var _logger: Logger?
    var logger: Logger {
        if let value = _logger { return value }
        let value = Logger()
        _logger = value
        return value
    }
    func movieController(movieID: UInt, title: String) -> UIViewController {
        let dependencies = MovieViewControllerDependencyContainer(injecting: self, movieID: movieID, title: title)
        let value = MovieViewController(injecting: dependencies)
        return value
    }
    init(injecting dependencies: HomeViewControllerInputDependencyResolver) {
        self.movieManager = dependencies.movieManager
        self.imageManager = dependencies.imageManager
        self.reviewManager = dependencies.reviewManager
    }
}
extension HomeViewControllerDependencyContainer: MovieViewControllerInputDependencyResolver {}
protocol HomeViewControllerDependencyInjectable {
    init(injecting dependencies: HomeViewControllerDependencyResolver)
}