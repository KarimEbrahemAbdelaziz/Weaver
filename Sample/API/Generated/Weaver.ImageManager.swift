/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!
import Foundation
import UIKit
import WeaverDI
// MARK: - ImageManager
protocol ImageManagerDependencyResolver {
    var logger: Logger { get }
    var urlSession: URLSession { get }
    func urlSessionCustomRef() -> URLSession
    var movieAPI: APIProtocol { get }
}
final class ImageManagerDependencyContainer: ImageManagerDependencyResolver {
    var logger: Logger { 
        return loggerRef.value
    }
    private lazy var loggerRef = Instance<Logger>(scope: .graph) { [unowned self] in
        return Logger()
    }
    var urlSession: URLSession { 
        return urlSessionRef.value        
    }
    private lazy var urlSessionRef = Instance<URLSession>(scope: .container) { [unowned self] in
        return self.urlSessionCustomRef()
    }
    var movieAPI: APIProtocol { 
        return movieAPIRef.value
    }
    private lazy var movieAPIRef = Instance<APIProtocol>(scope: .graph) { [unowned self] in
        let dependencies = MovieAPIDependencyContainer(injecting: self)
        return MovieAPI(injecting: dependencies)
    }
    init() {
        _ = loggerRef.value
        _ = urlSessionRef.value
        _ = movieAPIRef.value
    }
}
extension ImageManagerDependencyContainer: MovieAPIInputDependencyResolver {}
extension ImageManager {
    public convenience init() {
        let dependencies = ImageManagerDependencyContainer()
        self.init(injecting: dependencies)
    }
}