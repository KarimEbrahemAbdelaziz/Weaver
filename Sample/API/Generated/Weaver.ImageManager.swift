/// This file is generated by Weaver 0.9.12
/// DO NOT EDIT!
import Foundation
import UIKit
import WeaverDI
// MARK: - ImageManager
final class ImageManagerDependencyContainer: DependencyContainer {
    init() {
        super.init()
    }
    override func registerDependencies(in store: DependencyStore) {
        store.register(APIProtocol.self, scope: .graph, name: "movieAPI", builder: { (dependencies) in
            return MovieAPI.makeMovieAPI(injecting: dependencies)
        })
        store.register(Logger.self, scope: .graph, name: "logger", builder: { (dependencies) in
            return Logger()
        })
        store.register(URLSession.self, scope: .container, name: "urlSession", builder: { (dependencies) in
            return self.urlSessionCustomRef()
        })
    }
}
protocol ImageManagerDependencyResolver {
    var movieAPI: APIProtocol { get }
    var logger: Logger { get }
    var urlSession: URLSession { get }
    func urlSessionCustomRef() -> URLSession
}
extension ImageManagerDependencyContainer: ImageManagerDependencyResolver {
    var movieAPI: APIProtocol {
        return resolve(APIProtocol.self, name: "movieAPI")
    }
    var logger: Logger {
        return resolve(Logger.self, name: "logger")
    }
    var urlSession: URLSession {
        return resolve(URLSession.self, name: "urlSession")
    }
}
// MARK: - ImageManagerShim
final class ImageManagerShimDependencyContainer: DependencyContainer {
    private lazy var internalDependencies: ImageManagerDependencyContainer = {
        return ImageManagerDependencyContainer()
    }()
    init() {
        super.init()
    }
    override func registerDependencies(in store: DependencyStore) {
    }
}
extension ImageManagerShimDependencyContainer: ImageManagerDependencyResolver {
    var movieAPI: APIProtocol {
        return internalDependencies.resolve(APIProtocol.self, name: "movieAPI")
    }
    var logger: Logger {
        return internalDependencies.resolve(Logger.self, name: "logger")
    }
    var urlSession: URLSession {
        return internalDependencies.resolve(URLSession.self, name: "urlSession")
    }
}
extension ImageManager {
    public convenience init() {
        let shim = ImageManagerShimDependencyContainer()
        self.init(injecting: shim)
    }
}
