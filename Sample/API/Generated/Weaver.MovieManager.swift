/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!
import Foundation
import WeaverDI
// MARK: - MovieManager
protocol MovieManagerInputDependencyResolver {
    var logger: Logger { get }
}
protocol MovieManagerDependencyResolver {
    var host: String? { get }
    var logger: Logger { get }
    var urlSession: URLSession { get }
    func urlSessionCustomRef() -> URLSession
    var movieAPI: APIProtocol { get }
}
final class MovieManagerDependencyContainer: MovieManagerDependencyResolver {
    let host: String?
    let logger: Logger
    var urlSession: URLSession { 
        return urlSessionRef.value        
    }
    private lazy var urlSessionRef = Instance<URLSession>(scope: .container) { [unowned self] in
        return self.urlSessionCustomRef()
    }
    var movieAPI: APIProtocol { 
        return movieAPIRef.value
    }
    private lazy var movieAPIRef = Instance<APIProtocol>(scope: .graph) { [unowned self] in
        let dependencies = MovieAPIDependencyContainer(injecting: self)
        return MovieAPI(injecting: dependencies)
    }
    init(injecting dependencies: MovieManagerInputDependencyResolver, host: String?) {
        self.host = host
        logger = dependencies.logger
        _ = urlSessionRef.value
        _ = movieAPIRef.value
    }
}
extension MovieManagerDependencyContainer: MovieAPIInputDependencyResolver {}
protocol MovieManagerDependencyInjectable {
    init(injecting dependencies: MovieManagerDependencyResolver)
}
final class MovieManagerShimDependencyContainer: MovieManagerInputDependencyResolver {
    let logger: Logger
    init(logger: Logger) {
        self.logger = logger
    }
}
extension MovieManager {
    public convenience init(logger: Logger, host: String?) {
        let shim = MovieManagerShimDependencyContainer(logger: logger)
        let dependencies = MovieManagerDependencyContainer(injecting: shim, host: host)
        self.init(injecting: dependencies)
    }
}