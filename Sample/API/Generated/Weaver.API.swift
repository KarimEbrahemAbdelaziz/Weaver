/// This file is generated by Weaver 0.9.12
/// DO NOT EDIT!
import Foundation
import WeaverDI
// MARK: - MovieAPI
final class MovieAPIDependencyContainer: DependencyContainer {
    init(parent: DependencyContainer? = nil, parentReferenceType: DependencyContainer.ReferenceType) {
        super.init(parent, parentReferenceType: parentReferenceType)
    }
    override func registerDependencies(in store: DependencyStore) {
        store.register(Logger.self, scope: .graph, name: "logger", builder: { (dependencies) in
            return Logger()
        })
    }
}
protocol MovieAPIDependencyResolver {
    var logger: Logger { get }
    var urlSession: URLSession { get }
}
extension MovieAPIDependencyContainer: MovieAPIDependencyResolver {
    var logger: Logger {
        return resolve(Logger.self, name: "logger")
    }
    var urlSession: URLSession {
        return resolve(URLSession.self, name: "urlSession")
    }
}
extension MovieAPI {
    static func makeMovieAPI(injecting parentDependencies: DependencyContainer, referenceType: DependencyContainer.ReferenceType) -> MovieAPI {
        let dependencies = MovieAPIDependencyContainer(parent: parentDependencies, parentReferenceType: referenceType)
        return MovieAPI(injecting: dependencies)
    }
}
protocol MovieAPIDependencyInjectable {
    init(injecting dependencies: MovieAPIDependencyResolver)
}
extension MovieAPI: MovieAPIDependencyInjectable {}
// MARK: - MovieAPIShim
final class MovieAPIShimDependencyContainer: DependencyContainer {
    private lazy var internalDependencies: MovieAPIDependencyContainer = {
        return MovieAPIDependencyContainer(parent: self, parentReferenceType: .weak)
    }()
    let urlSession: URLSession
    init(urlSession: URLSession) {
        self.urlSession = urlSession
        super.init()
    }
    override func registerDependencies(in store: DependencyStore) {
        store.register(URLSession.self, scope: .weak, name: "urlSession", builder: { [weak self] _ in
            guard let strongSelf = self else {
                fatalError("Container was released too early. If you see this happen, please file a bug.") 
            }
            return strongSelf.urlSession
        })
    }
}
extension MovieAPIShimDependencyContainer: MovieAPIDependencyResolver {
    var logger: Logger {
        return internalDependencies.resolve(Logger.self, name: "logger")
    }
}
extension MovieAPI {
    public convenience init(urlSession: URLSession) {
        let shim = MovieAPIShimDependencyContainer(urlSession: urlSession)
        self.init(injecting: shim)
    }
}