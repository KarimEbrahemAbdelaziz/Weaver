/// This file is generated by Weaver 0.9.13
/// DO NOT EDIT!
import Foundation
import WeaverDI
// MARK: - MovieAPI
protocol MovieAPIInputDependencyResolver {
    var urlSession: URLSession { get }
}
protocol MovieAPIDependencyResolver {
    var urlSession: URLSession { get }
    var logger: Logger { get }
}
final class MovieAPIDependencyContainer: MovieAPIDependencyResolver {
    let urlSession: URLSession
    var logger: Logger { 
        return loggerRef.value
    }
    private lazy var loggerRef = Instance<Logger>(scope: .graph) { [unowned self] in
        return Logger()
    }
    init(injecting dependencies: MovieAPIInputDependencyResolver) {
        urlSession = dependencies.urlSession
        _ = loggerRef.value
    }
}
protocol MovieAPIDependencyInjectable {
    init(injecting dependencies: MovieAPIDependencyResolver)
}
final class MovieAPIShimDependencyContainer: MovieAPIInputDependencyResolver {
    let urlSession: URLSession
    init(urlSession: URLSession) {
        self.urlSession = urlSession
    }
}
extension MovieAPI {
    public convenience init(urlSession: URLSession) {
        let shim = MovieAPIShimDependencyContainer(urlSession: urlSession)
        let dependencies = MovieAPIDependencyContainer(injecting: shim)
        self.init(injecting: dependencies)
    }
}